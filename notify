#!/usr/bin/env python
# encoding: utf-8
#
# This script sends message over amqp bus as notification

__author__ = "Jiří Zapletal"
__license__ = "GPLv2"

import os
import sys
from datetime import datetime
import socket
import time

config = {
	'user': 'notify',
	'password': '__replace__',
	'host': '__replace__',
	'exchange': 'desktop_notify',
}

import pika
def send_msg(config, msg):
	credentials = pika.PlainCredentials(config['user'], config['password'])
	connection = pika.BlockingConnection(
		pika.ConnectionParameters(host=config['host'], port=5671, credentials=credentials, ssl=True, heartbeat_interval=10)
	)
	channel = connection.channel()
	channel.exchange_declare(exchange=config['exchange'], exchange_type='fanout', durable=True)
	channel.basic_publish(exchange=config['exchange'], routing_key=config['exchange'], body=msg,
		properties=pika.BasicProperties(delivery_mode = 2)
	)
	connection.close()

def get_local_ip():
	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.connect(('8.8.8.8', 0))  # connecting to a UDP address doesn't send packets
	return s.getsockname()[0]

def wait_for_pid(pid):
	pid = int(pid)
	print "Waiting for pid %d" % pid
	while os.path.isdir('/proc/%d' % pid) == True:
		time.sleep(1)
	print "Done waiting for pid %d" % pid

msg = "done"

if len(sys.argv) > 1:
	if len(sys.argv) > 2 and sys.argv[1] == '-p':
		wait_for_pid(sys.argv[2])
		if len(sys.argv) > 3:
			msg = " ".join(sys.argv[3:])
	else:
		msg = " ".join(sys.argv[1:])

import getpass
data = {
	'msg': msg,
	'hostname': socket.gethostname(),
	'ip': get_local_ip(),
	'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
	'user': getpass.getuser(),
}

tpl = \
"""\
{{user}}@{{hostname}}
{{msg}}
<i>IP: {{ip}}</i>
<i>Date: {{date}}</i>
"""

from jinja2 import Template
t = Template(tpl)
body = t.render(data)

send_msg(config, body)

sys.exit(0)
